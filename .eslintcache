[{"E:\\Sonawane Swarnim\\Web Dev\\typing-game\\src\\index.js":"1","E:\\Sonawane Swarnim\\Web Dev\\typing-game\\src\\reportWebVitals.js":"2","E:\\Sonawane Swarnim\\Web Dev\\typing-game\\src\\App.js":"3","E:\\Sonawane Swarnim\\Web Dev\\typing-game\\src\\pages\\Home.jsx":"4","E:\\Sonawane Swarnim\\Web Dev\\typing-game\\src\\components\\Header.jsx":"5","E:\\Sonawane Swarnim\\Web Dev\\typing-game\\src\\components\\Content.jsx":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"8"},{"size":361,"mtime":1610805197853,"results":"10","hashOfConfig":"8"},{"size":409,"mtime":1610907924579,"results":"11","hashOfConfig":"8"},{"size":235,"mtime":1610866054393,"results":"12","hashOfConfig":"8"},{"size":5277,"mtime":1611136229719,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"579ygq",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},"E:\\Sonawane Swarnim\\Web Dev\\typing-game\\src\\index.js",[],["28","29"],"E:\\Sonawane Swarnim\\Web Dev\\typing-game\\src\\reportWebVitals.js",[],"E:\\Sonawane Swarnim\\Web Dev\\typing-game\\src\\App.js",[],"E:\\Sonawane Swarnim\\Web Dev\\typing-game\\src\\pages\\Home.jsx",[],"E:\\Sonawane Swarnim\\Web Dev\\typing-game\\src\\components\\Header.jsx",[],"E:\\Sonawane Swarnim\\Web Dev\\typing-game\\src\\components\\Content.jsx",["30"],"import React from 'react';\r\nimport { render } from '@testing-library/react';\r\nimport './Content.css'\r\n\r\nclass Content extends React.Component {\r\n\r\n    componentDidMount() {\r\n        // all of our quotes\r\n        const quotes = [\r\n            'When you have eliminated the impossible, whatever remains, however improbable, must be the truth.',\r\n            'There is nothing more deceptive than an obvious fact.',\r\n            'I ought to know by this time that when a fact appears to be opposed to a long train of deductions it invariably proves to be capable of bearing some other interpretation.',\r\n            'I never make exceptions. An exception disproves the rule.',\r\n            'What one man can invent another can discover.',\r\n            'Nothing clears up a case so much as stating it to another person.',\r\n            'Education never ends, Watson. It is a series of lessons, with the greatest for the last.',\r\n        ];\r\n        // store the list of words and the index of the word the player is currently typing\r\n        let words = [];\r\n        let wordIndex = 0;\r\n        // the starting time\r\n        let startTime = Date.now();\r\n        // page elements\r\n        const quoteElement = document.getElementById('quote');\r\n        const messageElement = document.getElementById('message');\r\n        const typedValueElement = document.getElementById('typed-value');\r\n\r\n        // disabling input\r\n        typedValueElement.disabled = true;\r\n\r\n        document.getElementById('start').addEventListener('click', () => {\r\n            // get a quote\r\n            const quoteIndex = Math.floor(Math.random() * quotes.length);\r\n            const quote = quotes[quoteIndex];\r\n            // Put the quote into an array of words\r\n            words = quote.split(' ');\r\n            // reset the word index for tracking\r\n            wordIndex = 0;\r\n        \r\n            // UI updates\r\n            // Create an array of span elements so we can set a class\r\n            const spanWords = words.map(function(word) { return `<span>${word} </span>`});\r\n            // Convert into string and set as innerHTML on quote display\r\n            quoteElement.innerHTML = spanWords.join('');\r\n            // Highlight the first word\r\n            quoteElement.childNodes[0].className = 'highlight';\r\n            // Clear any prior messages\r\n            messageElement.innerText = '';\r\n        \r\n            // Setup the textbox\r\n            typedValueElement.disabled = false;\r\n            // Clear the textbox\r\n            typedValueElement.value = '';\r\n            // set focus\r\n            typedValueElement.focus();\r\n            // set the event handler\r\n        \r\n            // Start the timer\r\n            startTime = new Date().getTime();\r\n        });\r\n\r\n        typedValueElement.addEventListener('input', () => {\r\n            // Get the current word\r\n            const currentWord = words[wordIndex];\r\n            // get the current value\r\n            const typedValue = typedValueElement.value;\r\n        \r\n            if (typedValue === currentWord && wordIndex === words.length - 1) {\r\n                // end of sentence\r\n                // Display success\r\n                const elapsedTime = new Date().getTime() - startTime;\r\n                const message = `Nice! You finished in ${elapsedTime / 1000} seconds.`;\r\n                messageElement.innerText = message;\r\n                typedValueElement.disabled = true;\r\n            } \r\n            else if (typedValue.endsWith(' ') && typedValue.trim() === currentWord) {\r\n                // end of word\r\n                // clear the typedValueElement for the new word\r\n                typedValueElement.value = '';\r\n                // move to the next word\r\n                wordIndex++;\r\n                // reset the class name for all elements in quote\r\n                for (const wordElement of quoteElement.childNodes) {\r\n                    wordElement.className = '';\r\n                }\r\n                // highlight the new word\r\n                quoteElement.childNodes[wordIndex].className = 'highlight';\r\n            } \r\n            else if (currentWord.startsWith(typedValue)) {\r\n                // currently correct\r\n                // highlight the next word\r\n                typedValueElement.className = 'component-input-tag';\r\n            } \r\n            else {\r\n                // error state\r\n                console.log(\"error state reached\");\r\n                typedValueElement.className = 'error';\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"component-content\">\r\n    \r\n                <p className=\"component-content\">Click the start button to have a quote displayed and then type it out as fast as you can!</p>\r\n                <hr/>\r\n                <p className=\"component-quote\" id=\"quote\"></p>\r\n                <p className=\"component-status-message\" id=\"message\"></p>\r\n    \r\n                <div className=\"input-form-div\">\r\n                    <button className=\"input-form-div\" id=\"start\"> <span className=\"input-form-div\">Start!</span> </button>\r\n                    <input type=\"text\" className=\"component-input-tag\" id=\"typed-value\"/>\r\n                </div>\r\n    \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Content;",{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":2,"column":10,"nodeType":"37","messageId":"38","endLine":2,"endColumn":16},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"no-unused-vars","'render' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]